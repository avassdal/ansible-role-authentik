---

- name: Wait for container to be accessible
  ansible.builtin.wait_for:
    host: "{{ proxmox_lxc_container_hostname }}"
    port: 22
    delay: 10
    timeout: 300
  delegate_to: localhost

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3
      - python3-pip
      - python3-setuptools
      - uidmap
    state: present
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install Docker
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create Docker group
  ansible.builtin.group:
    name: docker
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Add authentik user to Docker group
  ansible.builtin.user:
    name: authentik
    groups: docker
    append: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Configure Docker daemon for rootless mode
  ansible.builtin.copy:
    content: |
      {
        "userns-remap": "default"
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install Docker Python package
  ansible.builtin.apt:
    name: python3-docker
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik network is created in Docker
  community.docker.docker_network:
    name: "{{ authentik_container_network }}"
    driver: bridge
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create authentik group
  ansible.builtin.group:
    name: authentik
    gid: "{{ authentik_gid }}"
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create authentik user
  ansible.builtin.user:
    name: authentik
    uid: "{{ authentik_uid }}"
    group: authentik
    system: true
    create_home: false
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik paths exists
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: 0700
    owner: "{{ authentik_uid }}"
    group: "{{ authentik_gid }}"
  with_items:
    - {path: "{{ authentik_base_path }}", when: true}
    - {path: "{{ authentik_certs_path }}", when: true}
    - {path: "{{ authentik_custon_templates_path }}", when: true}
    - {path: "{{ authentik_media_path }}", when: true}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik traefik labels are installed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ authentik_uid }}"
    group: "{{ authentik_gid }}"
    mode: 0640
  when: authentik_container_labels_traefik_enabled | bool
  with_items:
    - {src: "{{ role_path }}/templates/labels.j2", dest: "{{ authentik_base_path }}/labels"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik traefik labels are not installed
  ansible.builtin.file:
    path: "{{ authentik_base_path }}/labels"
    state: absent
  when: not authentik_container_labels_traefik_enabled | bool
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik configuration is deployed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ authentik_uid }}"
    group: "{{ authentik_gid }}"
    mode: 0640
  with_items:
    - {src: "{{ role_path }}/templates/env.j2", dest: "{{ authentik_base_path }}/env"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install PostgreSQL
  ansible.builtin.apt:
    name:
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
    state: present
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Start and enable PostgreSQL
  ansible.builtin.systemd:
    name: postgresql
    state: started
    enabled: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create PostgreSQL user
  community.postgresql.postgresql_user:
    name: "{{ authentik_database_username }}"
    password: "{{ authentik_database_password }}"
    role_attr_flags: CREATEDB,SUPERUSER
  become: true
  become_user: postgres
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create PostgreSQL database
  community.postgresql.postgresql_db:
    name: "{{ authentik_database_name }}"
    owner: "{{ authentik_database_username }}"
    encoding: UTF-8
  become: true
  become_user: postgres
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install Redis
  ansible.builtin.apt:
    name: redis-server
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Start and enable Redis
  ansible.builtin.systemd:
    name: redis-server
    state: started
    enabled: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik container image is pulled
  community.docker.docker_image:
    name: "{{ item.image }}"
    source: "{{ 'pull' if ansible_version.major > 2 or ansible_version.minor > 7 else omit }}"
  with_items:
    - {image: "{{ authentik_container_image }}"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik.service installed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - {src: "{{ role_path }}/templates/systemd/authentik-server.service.j2", dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ authentik_server_identifier }}.service"}
    - {src: "{{ role_path }}/templates/systemd/authentik-worker.service.j2", dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ authentik_worker_identifier }}.service"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Enable and start authentik services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
    - "{{ authentik_server_identifier }}.service"
    - "{{ authentik_worker_identifier }}.service"
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root
