---

- name: Wait for container to be accessible
  ansible.builtin.wait_for:
    host: "{{ proxmox_lxc_container_hostname }}"
    port: 22
    delay: 10
    timeout: 300
  delegate_to: localhost

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3
      - python3-pip
      - python3-setuptools
      - uidmap
    state: present
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install Docker
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create Docker group
  ansible.builtin.group:
    name: docker
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Add authentik user to Docker group
  ansible.builtin.user:
    name: authentik
    groups: docker
    append: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Configure Docker daemon for rootless mode
  ansible.builtin.copy:
    content: |
      {
        "userns-remap": "default"
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure Docker service is started and enabled
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Install Docker Python package
  ansible.builtin.apt:
    name: python3-docker
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create Docker network for Authentik
  community.docker.docker_network:
    name: "{{ authentik_container_network }}"
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  with_items:
    - "{{ authentik_base_path }}/postgres"
    - "{{ authentik_base_path }}/redis"
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Start PostgreSQL container
  community.docker.docker_container:
    name: "{{ authentik_identifier }}-postgres"
    image: postgres:15
    state: started
    restart_policy: always
    networks:
      - name: "{{ authentik_container_network }}"
    env:
      POSTGRES_USER: "{{ authentik_database_username }}"
      POSTGRES_PASSWORD: "{{ authentik_database_password }}"
      POSTGRES_DB: "{{ authentik_database_name }}"
    volumes:
      - "{{ authentik_base_path }}/postgres:/var/lib/postgresql/data"
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Wait for PostgreSQL to be ready
  community.docker.docker_container_exec:
    container: "{{ authentik_identifier }}-postgres"
    command: pg_isready -U {{ authentik_database_username }} -d {{ authentik_database_name }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 2
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Start Redis container
  community.docker.docker_container:
    name: "{{ authentik_identifier }}-redis"
    image: redis:7
    state: started
    restart_policy: always
    networks:
      - name: "{{ authentik_container_network }}"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - "{{ authentik_base_path }}/redis:/data"
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create authentik group
  ansible.builtin.group:
    name: authentik
    gid: "{{ authentik_gid }}"
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create authentik user
  ansible.builtin.user:
    name: authentik
    uid: "{{ authentik_uid }}"
    group: authentik
    system: true
    create_home: false
    state: present
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik paths exists
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: 0700
    owner: "{{ authentik_uid }}"
    group: "{{ authentik_gid }}"
  with_items:
    - {path: "{{ authentik_base_path }}", when: true}
    - {path: "{{ authentik_certs_path }}", when: true}
    - {path: "{{ authentik_custon_templates_path }}", when: true}
    - {path: "{{ authentik_media_path }}", when: true}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik traefik labels are installed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ authentik_uid }}"
    group: "{{ authentik_gid }}"
    mode: 0640
  when: authentik_container_labels_traefik_enabled | bool
  with_items:
    - {src: "{{ role_path }}/templates/labels.j2", dest: "{{ authentik_base_path }}/labels"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik traefik labels are not installed
  ansible.builtin.file:
    path: "{{ authentik_base_path }}/labels"
    state: absent
  when: not authentik_container_labels_traefik_enabled | bool
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik configuration is deployed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ authentik_uid }}"
    group: "{{ authentik_gid }}"
    mode: 0640
  with_items:
    - {src: "{{ role_path }}/templates/env.j2", dest: "{{ authentik_base_path }}/env"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik container image is pulled
  community.docker.docker_image:
    name: "{{ item.image }}"
    source: "{{ 'pull' if ansible_version.major > 2 or ansible_version.minor > 7 else omit }}"
  with_items:
    - {image: "{{ authentik_container_image }}"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create Traefik network
  community.docker.docker_network:
    name: traefik
    driver: bridge
    state: present
  when: authentik_container_labels_traefik_enabled | bool
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create directories for Traefik
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ authentik_data_dir }}/traefik"
    - "{{ authentik_data_dir }}/letsencrypt"
  when: authentik_container_labels_traefik_enabled | bool
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Create Traefik container
  community.docker.docker_container:
    name: traefik
    image: traefik:v2.10
    state: started
    restart_policy: unless-stopped
    networks:
      - name: traefik
      - name: "{{ authentik_container_network }}"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "{{ authentik_data_dir }}/traefik:/etc/traefik"
      - "{{ authentik_data_dir }}/letsencrypt:/letsencrypt"
    command:
      - "--log.level=DEBUG"
      - "--certificatesresolvers.domeneshop.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.domeneshop.acme.dnschallenge=true"
      - "--certificatesresolvers.domeneshop.acme.dnschallenge.provider=domeneshop"
      - "--certificatesresolvers.domeneshop.acme.dnschallenge.delaybeforecheck=60"
      - "--certificatesresolvers.domeneshop.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.domeneshop.acme.email={{ authentik_email_from }}"
      - "--certificatesresolvers.domeneshop.acme.storage=/letsencrypt/acme.json"
    env:
      DOMENESHOP_API_TOKEN: "{{ domeneshop_api_token }}"
      DOMENESHOP_API_SECRET: "{{ domeneshop_api_secret }}"
      DOMENESHOP_HTTP_TIMEOUT: "60"
  when: authentik_container_labels_traefik_enabled | bool
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Connect Authentik container to Traefik network and add labels
  community.docker.docker_container:
    name: "{{ authentik_container_name }}"
    image: "{{ authentik_container_image }}"
    networks_cli_compatible: true
    networks:
      - name: "{{ authentik_container_network }}"
      - name: traefik
    labels:
      traefik.enable: "{{ authentik_container_labels_traefik_enabled | string }}"
      traefik.docker.network: "{{ authentik_container_labels_traefik_docker_network }}"
      traefik.http.routers.authentik.entrypoints: "{{ authentik_container_labels_traefik_entrypoints }}"
      traefik.http.routers.authentik.rule: "{{ authentik_container_labels_traefik_rule }}"
      traefik.http.routers.authentik.priority: "{{ authentik_container_labels_traefik_priority }}"
      traefik.http.routers.authentik.tls: "{{ authentik_container_labels_traefik_tls | string }}"
      traefik.http.routers.authentik.tls.certresolver: "{{ authentik_container_labels_traefik_tls_certResolver }}"
      traefik.http.middlewares.authentik-headers.headers.customResponseHeaders.Strict-Transport-Security: "{{ authentik_container_labels_traefik_additional_response_headers_auto['Strict-Transport-Security'] }}"
      traefik.http.middlewares.authentik-headers.headers.customResponseHeaders.X-Content-Type-Options: "{{ authentik_container_labels_traefik_additional_response_headers_auto['X-Content-Type-Options'] }}"
      traefik.http.middlewares.authentik-headers.headers.customResponseHeaders.X-Frame-Options: "{{ authentik_container_labels_traefik_additional_response_headers_auto['X-Frame-Options'] }}"
      traefik.http.middlewares.authentik-headers.headers.customResponseHeaders.Referrer-Policy: "{{ authentik_container_labels_traefik_additional_response_headers_auto['Referrer-Policy'] }}"
      traefik.http.middlewares.authentik-headers.headers.customResponseHeaders.Content-Security-Policy: "{{ authentik_container_labels_traefik_additional_response_headers_auto['Content-Security-Policy'] }}"
      traefik.http.routers.authentik.middlewares: authentik-headers
  when: authentik_container_labels_traefik_enabled | bool
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Ensure authentik.service installed
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - {src: "{{ role_path }}/templates/systemd/authentik-server.service.j2", dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ authentik_server_identifier }}.service"}
    - {src: "{{ role_path }}/templates/systemd/authentik-worker.service.j2", dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ authentik_worker_identifier }}.service"}
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root

- name: Enable and start authentik services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
    - "{{ authentik_server_identifier }}.service"
    - "{{ authentik_worker_identifier }}.service"
  become: true
  delegate_to: "{{ proxmox_lxc_container_hostname }}"
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    ansible_user: root
