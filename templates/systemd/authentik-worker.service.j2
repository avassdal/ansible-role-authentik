[Unit]
Description=Authentik Worker ({{ authentik_worker_identifier }})
# Ensure services are healthy before starting
{% for service in authentik_worker_systemd_required_services_list %}
Requires={{ service }}
After={{ service }}
{% endfor %}

# Add additional health check
ExecStartPre=/bin/sh -c 'until docker exec {{ authentik_identifier }}-postgres pg_isready -U {{ authentik_database_username }} -d {{ authentik_database_name }}; do sleep 1; done'
ExecStartPre=/bin/sh -c 'until docker exec {{ authentik_identifier }}-redis redis-cli ping | grep -q PONG; do sleep 1; done'
DefaultDependencies=no

[Service]
Type=simple
ExecStartPre=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} stop --time={{ devture_systemd_docker_base_container_stop_grace_time_seconds }} {{ authentik_worker_identifier }} 2>/dev/null || true'
ExecStartPre=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} rm {{ authentik_worker_identifier }} 2>/dev/null || true'

ExecStartPre={{ devture_systemd_docker_base_host_command_docker }} create \
			--rm \
			--name={{ authentik_worker_identifier }} \
			--user=root \
			--network={{ authentik_container_network }} \
			--env-file={{ authentik_env_path }} \
			--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
			--mount type=bind,src={{ authentik_certs_path }},dst=/certs \
			--mount type=bind,src={{ authentik_media_path }},dst=/media \
			--mount type=bind,src={{ authentik_custon_templates_path }},dst=/templates \
			--tmpfs=/tmp:rw,noexec,nosuid,size=100m \
			{{ authentik_container_image }} worker

{% for network in authentik_container_additional_networks %}
ExecStartPre={{ devture_systemd_docker_base_host_command_docker }} network connect {{ network }} {{ authentik_worker_identifier }}
{% endfor %}

ExecStart={{ devture_systemd_docker_base_host_command_docker }} start --attach {{ authentik_worker_identifier }}

ExecStop=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} stop --time={{ devture_systemd_docker_base_container_stop_grace_time_seconds }} {{ authentik_worker_identifier }} 2>/dev/null || true'
ExecStop=-{{ devture_systemd_docker_base_host_command_sh }} -c '{{ devture_systemd_docker_base_host_command_docker }} rm {{ authentik_worker_identifier }} 2>/dev/null || true'
# Use unless-stopped equivalent in systemd
Restart=always
RestartSec=30
StartLimitIntervalSec=0
SyslogIdentifier={{ authentik_worker_identifier }}

[Install]
WantedBy=multi-user.target
